rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users collection - Profile management
    match /users/{userId} {
      // Users can read any user profile (for viewing profiles)
      allow read: if request.auth != null;
      
      // Users can only create/update/delete their own profile
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && request.auth.uid == userId;
      allow delete: if request.auth != null && request.auth.uid == userId;
      
      // Validate user data structure
      function isValidUser() {
        let user = request.resource.data;
        return user.keys().hasAll(['email', 'username', 'displayName']) &&
               user.email is string && user.email.size() > 0 &&
               user.username is string && user.username.size() > 0 &&
               user.displayName is string && user.displayName.size() > 0;
      }
      
      // Ensure create/update operations have valid data
      allow create, update: if request.auth != null && 
                              request.auth.uid == userId && 
                              isValidUser();
    }
    
    // User settings - Only the user can access their own settings
    match /users/{userId}/settings/{document=**} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // User achievements - Only the user can modify their own achievements
    match /users/{userId}/achievements/{document=**} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Study progress - Only the user can access their own study data
    match /users/{userId}/study_progress/{document=**} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Chat messages - Users can only access chats they're part of
    match /chats/{chatId} {
      allow read, write: if request.auth != null && 
        (request.auth.uid in resource.data.participants || 
         request.auth.uid == resource.data.createdBy);
    }
    
    // Chat messages within a chat
    match /chats/{chatId}/messages/{messageId} {
      allow read, write: if request.auth != null && 
        (request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants || 
         request.auth.uid == get(/databases/$(database)/documents/chats/$(chatId)).data.createdBy);
    }
    
    // Study materials - Authenticated users can read, creators can modify
    match /study_materials/{materialId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && 
        request.auth.uid == resource.data.createdBy;
    }
    
    // Comments on study materials
    match /study_materials/{materialId}/comments/{commentId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && 
        request.auth.uid == resource.data.userId;
    }
    
    // Community posts - Authenticated users can read, creators can modify
    match /community_posts/{postId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && 
        request.auth.uid == resource.data.authorId;
    }
    
    // Comments on community posts
    match /community_posts/{postId}/comments/{commentId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && 
        request.auth.uid == resource.data.authorId;
    }
    
    // User relationships (followers/following)
    match /user_relationships/{relationshipId} {
      allow read: if request.auth != null;
      allow create, update, delete: if request.auth != null && 
        request.auth.uid == resource.data.followerId;
    }
    
    // Flashcard sessions - Only the user can access their own sessions
    match /users/{userId}/flashcard_sessions/{sessionId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Quiz results - Only the user can access their own results
    match /users/{userId}/quiz_results/{resultId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // User notifications - Only the user can access their own notifications
    match /users/{userId}/notifications/{notificationId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Default rule - deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}